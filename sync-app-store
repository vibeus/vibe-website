#!/usr/bin/env python3
import json
import os
import requests
import yaml
from colorama import Fore, Style


def sync_apps(app_list_json, app_list_yaml, black_list):
    resp = requests.get(app_list_json)
        
    remote_list = resp.json()

    local_map = {}
    if os.path.exists(app_list_yaml):
        with open(app_list_yaml, "r") as f:
            apps = yaml.safe_load(f)
            local_list = apps.get("apps", [])
            for obj in local_list:
                obj_id = obj.get("id", "")
                if obj_id:
                    local_map[obj_id] = obj

    new_map = {}
    for app in remote_list:
        app_id = app.get("packageName", "")
        remote_icon = app.get("icon", "")
        if not app_id or app_id in black_list or not remote_icon:
            print(Style.DIM + "Ignore app: {}".format(app_id) + Style.RESET_ALL)
            continue
        local_icon = "assets/img/android-app-store/icons/{}.png".format(app_id)
        # try:
        icon_resp = requests.get(remote_icon)
        with open(local_icon, "wb") as f:
            f.write(icon_resp.content)
        # except requests.exceptions.SSLError:
        #     print(f'{local_icon} 404')

        app_obj = local_map.get(app_id, {})
        if app_id in local_map:
            del local_map[app_id]
        app_obj["id"] = app_id
        app_obj["name"] = app.get("name", "")
        new_map[app_id] = app_obj

    apps_to_save = []
    featured_count = 0
    for v in new_map.values():
        apps_to_save.append(v)
        if "use_case" not in v:
            print(
                Fore.YELLOW
                + "WARNING: app [{}] does not have use_case.".format(v["id"])
                + Style.RESET_ALL
            )
        if "type" not in v:
            print(
                Fore.RED
                + "ERROR: app [{}] does not have type.".format(v["id"])
                + Style.RESET_ALL
            )
        if v.get("featured", False):
            featured_count += 1

    if featured_count != 6:
        print(
            Fore.YELLOW
            + "WARNING: there should be 6 featured apps but {} found.".format(
                featured_count
            )
            + Style.RESET_ALL
        )

    apps_to_save.sort(key=lambda x: x["id"])
    with open(app_list_yaml, "w") as f:
        apps = {"apps": apps_to_save}
        yaml.dump(apps, f, allow_unicode=True, sort_keys=False)

    print(
        "Saved {} apps, removed {} existing apps.".format(
            len(apps_to_save), len(local_map)
        )
    )


def main():
    sync_apps(
        "https://dl.vibe.cn/configs/apps/ss/prod.json",
        "./data/android_apps_zh.yaml",
        ["com.android.rk","ai.inlight.board.app"],
    )
    sync_apps(
        "https://dl.vibe.us/configs/apps/ss/prod.json",
        "./data/android_apps.yaml",
        ["com.android.rk","ai.inlight.board.app"],
    )


if __name__ == "__main__":
    main()
